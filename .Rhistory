geom_point()
# let's choose only numeric values from the whole dataset
mtcars_num <- mtcars[, c(1,3:7)]
pairs(mtcars_num)
mtcars_num
l_m <- lm(mpg ~ hp, mtcars_num)
summary(l_m)
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth()
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth(method = 'lm')
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth(method = 'lm')+
facet_grid(.~cyl)
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth(method = 'lm')
df_y_pred <- data.frame(mtcars$mpg, l_m$fitted.values)
View(df_y_pred)
new_hp <- data.frame(hp = c(120, 133, 250, 303))
new_hp
new_hp$mpg <- predict(l_m, new_hp)
new_hp$mpg
mtcar$cyl <- factor(mtcars$cyl, c('four', 'six', 'eight'))
mtcars$cyl <- factor(mtcars$cyl, c('four', 'six', 'eight'))
mtcars$cyl
mtcars$cyl
mtcars$cyl <- factor(mtcars$cyl, labels= c('four', 'six', 'eight'))
mtcars$cyl <- factor(mtcars$cyl, labels = c('four', 'six', 'eight'))
# what should we do if our independent variable is not quantitative but
# is a nominative one?
data('mtacrs')
# what should we do if our independent variable is not quantitative but
# is a nominative one?
data('mtcars')
mtcars$cyl <- factor(mtcars$cyl, labels = c('four', 'six', 'eight'))
mtcars$cyl
l_m_nom <- lm(mpg ~ cyl, mtcars)
summary(l_m_nom)
ggplot(mtcats, aes(x=mtcars$cyl, y=mtcars$mpg))+
geom_point()+
geom_smooth(('lm'))
ggplot(mtcars, aes(x=mtcars$cyl, y=mtcars$mpg))+
geom_point()+
geom_smooth(('lm'))
ggplot(mtcars, aes(x=mtcars$cyl, y=mtcars$mpg))+
geom_point()+
geom_smooth(method ='lm')
summary(l_m_nom)
aggregate(mpg ~ cyl, mtcars, mean)
iris
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width))+
geom_point()
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()+
geom_smooth()
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()+
geom_smooth(method='lm')
my_plot <-  ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()+
geom_smooth(method='lm')
cor.test(mtcars$mpg, mtcars$hp)
summary(cor.test(mtcars$mpg, mtcars$hp))
cor.test(mtcars$mpg, mtcars$hp)
cor <-  cor.test(mtcars$mpg, mtcars$hp)
summary(cor)
cor$parameter
cor$estimate
cor.test(mtcars$mpg, mtcars$hp)$estimate
cor.test(mtcars$mpg, mtcars$hp)$p.value
l_m(mtcars$mpg ~ mtcars$hp)
lm(mtcars$mpg ~ mtcars$hp)
res <- lm(mtcars$mpg ~ mtcars$hp)
mtcars$fit <- res$fitted.values
if (cor.test(mtcars$mpg, mtcars$hp)$p.value < 0.05) {
res <- lm(mtcars$mpg ~ mtcars$hp)
mtcars$fit <- res$fitted.values
}
mtcars
regr.calc <- function(x){
if (cor.test(x[[1]], x[[2]])$p.value < 0.05) {
res <- lm(x[[1]] ~ x[[2]])
x$fit <- res$fitted.values
} else {
return("There is no sense in prediction")
}
}
regr.calc <- function(x){
if (cor.test(x[[1]], x[[2]])$p.value < 0.05) {
res <- lm(x[[1]] ~ x[[2]])
x$fit <- res$fitted.values
return(x)
} else {
return("There is no sense in prediction")
}
}
regr.calc(iris[,1:2])
mtcars
mtcars[,c('wt', 'mpg', 'disp', 'drat', 'hp')]
test1 <- lm(wt ~ mpg + disp + drat + hp, df )
df <-  mtcars[,c('wt', 'mpg', 'disp', 'drat', 'hp')]
test1 <- lm(wt ~ mpg + disp + drat + hp, df )
summary(test1)
# Adjusted R-squared:  0.8374
test2 <- lm(wt ~ mpg + disp + drat, df)
summary(test2)
# Adjusted R-squared:  0.8236
test3 <- lm(wt ~ mpg + disp, df)
summary(test3)
# Adjusted R-squared:  0.8374
test2 <- lm(wt ~ mpg + disp + hp, df)
summary(test2)
# Adjusted R-squared:  0.8428
test3 <- lm(wt ~ mpg + disp, df)
summary(test3)
data('attitude')
attitude
test4 <- lm(rating ~ complaints*critical, attitude)
summary(test4)
library(ggplot2)
ggplot(swiss, aes(x=Catholic, col='red'))+
geom_hist()
ggplot(swiss, aes(x=Catholic, col='red'))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red', bindwidth=0.4))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red', bindwidth=50))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'), bindwidth=50)+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'), binwidth=50)+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red', binwidth=50))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=50)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=10)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=5)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=1)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=15)
swiss$religion <- ifelse(swiss$Catholic > 60, 'Many', 'Low')
swiss
swiss$religion <-  as.factor(swiss$religion)
swiss
l_m_cat <- lm(Fertility ~ Examination+religion, data=swiss)
summary(l_m_cat)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col=religion)) +
geom_point() +
geom_smooth(method = 'lm')
attitude
test4 <- lm(rating ~ complaints*critical, attitude)
summary(test4)
# answer is 0.316
# linear regression with categorical variables
l_m_cat_3 <- lm(Fertility ~ Examination*religion*Infant.Mortality, data=swiss)
summary(l_m_cat_3)
mtcars$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
l_m_mtcars <- lm(mpg ~ wt*am, mtcars)
summary(l_m_mtcars)
ggplot(mtcars, aes(x = wt, y = mpg, col=am)) +
geom_point() +
geom_smooth(method = 'lm')
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, col=am)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(mtcars, aes(x = wt, y = mpg, col=am)) +
geom_smooth(method = 'lm')
iris
library(dplyr)
group_by(iris~Species)
group_by(Sepal.Length~Species, iris)
group_by(iris$Sepal.Length, Species)
iris
group_by(iris$Sepal.Length, Species)
iris
group_by(iris, Species)
library(ggplot2)
ggplot(group_by(iris, Species), aes(x=Sepal.Length))+
geom_density()
group_by(iris, Species)
group_by(iris, Species)
ggplot(group_by(iris, Species), aes(Sepal.Length))+
geom_density()
ggplot(group_by(iris, Species), aes(Sepal.Length))+
+geom_area(stat = "density")
ggplot(group_by(iris, Species), aes(Sepal.Length))
+geom_area(stat = "density")
ggplot(group_by(iris, Species), aes(Sepal.Length))+
geom_area(stat = "density")
ggplot(group_by(iris, Species), aes(Sepal.Length))+
geom_area(stat = "density", fill='Species')
ggplot(group_by(iris, Species), aes(Sepal.Length, fill='Species'))+
geom_area(stat = "density")
ggplot(group_by(iris, Species), aes(Species, fill='Species'))+
geom_area(stat = "density")
ggplot(group_by(iris, Species), aes(Sepal.Length, fill='Species'))+
geom_area(stat = "density")
ggplot(group_by(iris, Species), aes(Sepal.Length))+
geom_area(stat = "density")
one_part <- iris[iris$Species == 'Setosa']
one_part
one_part
one_part <- iris[iris$Species == 'Setosa', ]
one_part
iris
one_part <- iris[iris$Species == 'setosa', ]
one_part
two_part <- iris[iris$Species == 'versicolor', ]
two_part
three_part <- iris[iris$Species == 'vigrinica', ]
three_part
iris
three_part <- iris[iris$Species == 'virginica', ]
three_part
ggplot(iris_short, aes(x=Species, y=Sepal.Length))+
stat_summary(fun.data = mean_cl_normal, geom='errorbar', width=0.1)+
stat_summary(fun=mean, geom='point', size=4)
ggplot(iris_short, aes(x=Sepal.Length))+
geom_histogram(fill='white', col='green', binwidth = 0.4)+
facet_grid(iris_short$Species)
ggplot(iris_short, aes(x=Sepal.Length, fill=iris_short$Species))+
geom_density(alpha=0.5)
ggplot(iris, aes(x=Sepal.Length, fill=iris_short$Species))+
geom_density(alpha=0.5)
ggplot(iris, aes(x=Sepal.Length, fill=iris$Species))+
geom_density(alpha=0.5)
ggplot(iris, aes(x=Sepal.Length, fill=iris$Species))+
geom_density(alpha=0.2)
ggplot(iris, aes(x=Sepal.Length, fill=Species))+
geom_density(alpha=0.2)
test_data_06 <- read.csv("https://stepic.org/media/attachments/course/524/test_for_norm.csv")
test_data_06
str(test_data_06)
test_data_06$y <- as.factor(test_data$y)
test_data_06$z <- as.factor(test_data$z)
test_data_06$y <- as.factor(test_data_06$y)
test_data_06$z <- as.factor(test_data_06$z)
str(test_data_06)
test_data_06 %>%
group_by(y, z)
summarise(shapiro.test())
summarise(function(x) shapiro.test(x))
gr_test_data <- test_data_06 %>%
group_by(y, z)
summarise(gr_test_data, function(x) shapiro.test(x))
summarise(gr_test_data, sh_t = shapiro.test)
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_for_norm.csv", stringsAsFactors = T)
test_data_07 <- read.csv("https://stepic.org/media/attachments/course/524/test_for_norm.csv", stringsAsFactors = T)
test_data_07
str(test_data_07)
test_data_06 <- read.csv("https://stepic.org/media/attachments/course/524/test_for_norm.csv", stringsAsFactors = T)
str(test_data_06)
test_data_06$y <- as.factor(test_data_06$y)
test_data_06$z <- as.factor(test_data_06$z)
str(test_data_06)
gr_test_data <- test_data_06 %>%
group_by(y, z)
library(dplyr)
gr_test_data <- test_data_06 %>%
group_by(y, z)
gr_test_data
summarise(gr_test_data, sh_t = shapiro.test(x))
summarise(gr_test_data, shapiro.test(x))
shapiro.test(gr_trest_data)
gr_test_data <- test_data_06 %>%
group_by(y, z)
gr_test_data
shapiro.test(gr_trest_data)
gr_test_data <- test_data_06 %>%
group_by(y, z)
gr_test_data
shapiro.test(gr_trest_data, x)
shapiro.test(gr_trest_data, x)
shapiro.test(gr_trest_data)
gr_test_data <- test_data_06 %>%
group_by(y, z)
gr_test_data
shapiro.test(gr_test_data)
shapiro.test(gr_test_data$x)
summarise(gr_test_data, shapiro.test(gr_test_data$x))
shapiro.test(gr_test_data$x)
summarise(gr_test_data, shapiro.test(gr_test_data$x))
summarise(gr_test_data, shapiro.test())
test_data_06 %>%
group_by(y, z) %>%
summarise(results = data_frame(shapiro.test(.$x)))
test_data_06 %>%
group_by(y, z) %>%
summarise(results = data_frame(shapiro.test(.$x)))
test_data_06 %>%
group_by(y, z) %>%
summarise_(results = data_frame(shapiro.test(.$x)))
test_data_06 %>%
group_by(y, z) %>%
summarise(results = data_frame(shapiro.test(.$x)))
test_data_06 %>%
group_by(y, z) %>%
summarise(.dot = data_frame(shapiro.test(.$x)))
gr_data_06 <- test_data_06 %>%
group_by(y, z) %>%
summarise(gr_test_data, shapiro.test())
gr_data_06 <- test_data_06 %>%
group_by(y, z) %>%
apply(gr_data_06, 2, shapiro.test)
gr_data_06 <- test_data_06 %>%
group_by(y, z) %>%
apply(gr_data_06, 2, function(x) shapiro.test(x))
gr_data_06
gr_data_06 <- test_data_06 %>%
group_by(y, z) %>%
apply(gr_data_06, 2, function(x) shapiro.test(x))
gr_data_06 <- test_data_06 %>%
group_by(y, z) %>%
apply(gr_data_06, 2, function(x) shapiro.test(x))
gr_data_06 <- test_data_06 %>%
group_by(y, z) %>%
apply(gr_data_06, 2, function(x) shapiro.test(x))
gr_data_06 <- test_data_06 %>%
group_by(y, z)
bartlett.test(V1~V2, df1)
apply(gr_data_06, 2, function(x) shapiro.test(x))
apply(gr_data_06$x, 2, function(x) shapiro.test(x))
apply(gr_data_06, 2, function(x) shapiro.test(x))
gr_data_06 <- test_data_06 %>%
group_by(y, z)
gr_data_06
summarise(gr_test_data, shapiro.test())
summarise(gr_test_data, results = shapiro.test(x))
summarise(gr_test_data, results = as.vector(shapiro.test(x)))
test_data_06
str(test_data_06)
gr_data_06 <- test_data_06 %>%
group_by(y, z)
library(dplyr)
gr_data_06 <- test_data_06 %>%
group_by(y, z)
gr_data_06
summarise(gr_test_data, results = (shapiro.test(get('x'))))
summarise(gr_test_data, results = (shapiro.test(get('gr_test_data$x'))))
summarise(gr_test_data, results = (shapiro.test(get('x'))))
summarise(gr_test_data, mean(x))
summarise(gr_test_data,
mean(x),
shapiro.test(x))
summarise(gr_test_data,
mean(x),
shapiro.test(x)$p.value)
summarise(gr_test_data,
shapiro.test(x)$p.value)
summarise(gr_test_data,
p_value = shapiro.test(x)$p.value)
normality_by <- function(test){
test$y <- as.factor(test$y)
test$z <- as.factor(test$z)
gr_data_06 <- test %>%
group_by(y, z)
summarise(gr_test_data,
p_value = shapiro.test(x)$p.value)
}
normality_by(test_data_06)
test_data_06 <- read.csv("https://stepic.org/media/attachments/course/524/test_for_norm.csv", stringsAsFactors = T)
test_data_06$y <- as.factor(test_data_06$y)
test_data_06$z <- as.factor(test_data_06$z)
gr_data_06 <- test_data_06 %>%
group_by(y, z)
summarise(gr_data_06,
p_value = shapiro.test(x)$p.value)
normality_by <- function(test){
test$y <- as.factor(test$y)
test$z <- as.factor(test$z)
gr_data_06 <- test %>%
group_by(y, z)
summarise(gr_data_06,
p_value = shapiro.test(x)$p.value)
}
normality_by(test_data_06)
test_data_01 <- read.csv("https://stepic.org/media/attachments/course/524/test_data_hclust.csv")
test_data_01
dist_matrix <- dist(test_data_01)
dist_matrix
dist_matrix <- dist(test_data_01)
fit <- hclust(dist_matrix)
fit
cluster <- cutree(fit, 3)
cluster
cluster <- as.data.frame(cutree(fit, 3))
cluster
cluster <- cutree(fit, 3)
test_data_01$claster <- cluster
test_data_01
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$claster <- cluster
}
smart_hclust(test_data_01, 3)
smart_hclust<-  function(test_data, cluster_number){
dist_matrix <- dist(test_data)
fit <- hclust(dist_matrix)
cluster <- cutree(fit, cluster_number)
test_data$claster <- cluster
return(test_data)
}
smart_hclust(test_data_01, 3)
test_data_02 <- read.csv("https://stepic.org/media/attachments/course/524/cluster_2.csv")
test_data_02
dist_matrix <- dist(test_data_02)
fit <- hclust(dist_matrix)
cluster <- as.factor(cutree(fit, cluster_number))
cluster <- as.factor(cutree(fit, 4))
cluster <- as.factor(cutree(fit, 4))
test_data_02$claster <- cluster
test_data_02
test_data_02$cluster <- cluster
test_data_02 %>%
group_by(cluster)
test_data_02 %>%
group_by(cluster)
grouped <- test_data_02 %>%
group_by(cluster)
grouped
test_data_02 <- read.csv("https://stepic.org/media/attachments/course/524/cluster_2.csv")
dist_matrix <- dist(test_data_02)
fit <- hclust(dist_matrix)
cluster <- as.factor(cutree(fit, 4))
test_data_02$cluster <- cluster
grouped <- test_data_02 %>%
group_by(cluster)
grouped
summarise(grouped, aov(cluster~ .)$p.value)
apply(grouped, 2, function(x) aov(x ~ cluster)$p.value[1])
apply(grouped, 2, function(x) aov(x ~ cluster)$p.value)
grouped
aov(V1 ~ cluster)$p.value
aov(V1 ~ cluster, grouped)$p.value
aov(V1 ~ cluster, grouped)
summary(aov(V1 ~ cluster, grouped))
summary(aov(V1 ~ cluster, grouped))[1]
library(rmarkdown)
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
plot(pressure)
setwd("~/R_script")
head(iris)
data_glacier <-  read.csv('https://open.canada.ca/data/en/dataset/57ba3e50-2024-4570-8acf-4b99544fb689')
data_glacier
read.csv('38100089.csv')
read.csv('38100089.csv', na.strings = '..')
glacier <- read.csv('38100089.csv', na.strings = '..')
head(glacier)
glacier <- read.csv('38100089.csv', na.strings = '..', stringsAsFactors = T)
head(glacier)
library(dplyr)
group_by(glacier, GEO)
group_by(glacier, GEO)
summarise(gr, mean(VALUE))
gr <- group_by(glacier, GEO)
summarise(gr, mean(VALUE))
summarise(gr, mean(VALUE), range(REF_DATE))
summarise(gr, mean(VALUE), min(range(REF_DATE)))
summarise(gr, mean(VALUE), max(range(REF_DATE))-min(range(REF_DATE)))
summarise(gr, mean(VALUE, na.rm=T), max(range(REF_DATE))-min(range(REF_DATE)))
summarise(gr, mean(VALUE, na.rm=T), max(range(REF_DATE))-min(range(REF_DATE)), is.na(VALUES))
summarise(gr, mean(VALUE, na.rm=T), max(range(REF_DATE))-min(range(REF_DATE)), is.na(VALUE))
summarise(gr, mean(VALUE, na.rm=T), max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
summarise(gr, mean(VALUE, na.rm=T), max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
levels(glacier$GEO)
gr <- group_by(glacier, GEO)
summarise(gr, filter(Type.of.measure=='Annual mass balance')mean(VALUE, na.rm=T), max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
summarise(gr, max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
levels(glacier$GEO)
gr <- group_by(glacier, GEO)
summarise(gr, max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
filter(gr, Type.of.measure=='Annual mass balance')
fgr <- filter(gr, Type.of.measure=='Annual mass balance')
levels(glacier$GEO)
gr <- group_by(glacier, GEO)
summarise(gr, max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
fgr <- filter(gr, Type.of.measure=='Annual mass balance')
fgr <- filter(glacier, Type.of.measure=='Annual mass balance')
levels(glacier$GEO)
gr <- group_by(glacier, GEO)
summarise(gr, max(range(REF_DATE))-min(range(REF_DATE)), sum(is.na(VALUE)))
fgr <- filter(glacier, Type.of.measure=='Annual mass balance')
group_by(fgr, GEO)
summarise(dg1, mean(VALUE))
dg1 <- group_by(fgr, GEO)
summarise(dg1, mean(VALUE))
summarise(dg1, mean(VALUE, na.rm=T))
summarise(dg1, median(VALUE, na.rm=T))
The data set contains `r nrow(glacier)` rows and `r nlevels(glacier$GEO)` glaciers. Data were taken from `r min(glacier$REF_DATE)` to `r max(glacier$REF_DATE)` years. The data set includes this glaciers
