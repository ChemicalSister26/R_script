summary(l_m_task2)
l_m_task2$coefficients
res_cor <-  cor.test(x=mtcars$mpg, y=mtcars$hp, method = 'pearson')
str(res_cor)
# the same as above equation
cor.test(~ mpg+hp, mtcars)
# we know that correlation coeff PEARSON MAY NOT BE PRECIOUS
# in estimation of correlation between two variables, so let's plot a fugure
plot(x=mtcars$mpg, y=mtcars$hp)
ggplot(mtcars, aes(x=mpg, y=hp, col=factor(cyl)))+
geom_point()
library(ggplot2)
ggplot(mtcars, aes(x=mpg, y=hp, col=factor(cyl)))+
geom_point()
# let's choose only numeric values from the whole dataset
mtcars_num <- mtcars[, c(1,3:7)]
pairs(mtcars_num)
mtcars_num
l_m <- lm(mpg ~ hp, mtcars_num)
summary(l_m)
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth()
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth(method = 'lm')
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth(method = 'lm')+
facet_grid(.~cyl)
ggplot(mtcars, aes(hp, mpg))+
geom_point()+
geom_smooth(method = 'lm')
df_y_pred <- data.frame(mtcars$mpg, l_m$fitted.values)
View(df_y_pred)
new_hp <- data.frame(hp = c(120, 133, 250, 303))
new_hp
new_hp$mpg <- predict(l_m, new_hp)
new_hp$mpg
mtcar$cyl <- factor(mtcars$cyl, c('four', 'six', 'eight'))
mtcars$cyl <- factor(mtcars$cyl, c('four', 'six', 'eight'))
mtcars$cyl
mtcars$cyl
mtcars$cyl <- factor(mtcars$cyl, labels= c('four', 'six', 'eight'))
mtcars$cyl <- factor(mtcars$cyl, labels = c('four', 'six', 'eight'))
# what should we do if our independent variable is not quantitative but
# is a nominative one?
data('mtacrs')
# what should we do if our independent variable is not quantitative but
# is a nominative one?
data('mtcars')
mtcars$cyl <- factor(mtcars$cyl, labels = c('four', 'six', 'eight'))
mtcars$cyl
l_m_nom <- lm(mpg ~ cyl, mtcars)
summary(l_m_nom)
ggplot(mtcats, aes(x=mtcars$cyl, y=mtcars$mpg))+
geom_point()+
geom_smooth(('lm'))
ggplot(mtcars, aes(x=mtcars$cyl, y=mtcars$mpg))+
geom_point()+
geom_smooth(('lm'))
ggplot(mtcars, aes(x=mtcars$cyl, y=mtcars$mpg))+
geom_point()+
geom_smooth(method ='lm')
summary(l_m_nom)
aggregate(mpg ~ cyl, mtcars, mean)
iris
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width))+
geom_point()
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()+
geom_smooth()
ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()+
geom_smooth(method='lm')
my_plot <-  ggplot(iris, aes(x=Sepal.Width, y=Petal.Width, col=Species))+
geom_point()+
geom_smooth(method='lm')
cor.test(mtcars$mpg, mtcars$hp)
summary(cor.test(mtcars$mpg, mtcars$hp))
cor.test(mtcars$mpg, mtcars$hp)
cor <-  cor.test(mtcars$mpg, mtcars$hp)
summary(cor)
cor$parameter
cor$estimate
cor.test(mtcars$mpg, mtcars$hp)$estimate
cor.test(mtcars$mpg, mtcars$hp)$p.value
l_m(mtcars$mpg ~ mtcars$hp)
lm(mtcars$mpg ~ mtcars$hp)
res <- lm(mtcars$mpg ~ mtcars$hp)
mtcars$fit <- res$fitted.values
if (cor.test(mtcars$mpg, mtcars$hp)$p.value < 0.05) {
res <- lm(mtcars$mpg ~ mtcars$hp)
mtcars$fit <- res$fitted.values
}
mtcars
regr.calc <- function(x){
if (cor.test(x[[1]], x[[2]])$p.value < 0.05) {
res <- lm(x[[1]] ~ x[[2]])
x$fit <- res$fitted.values
} else {
return("There is no sense in prediction")
}
}
regr.calc <- function(x){
if (cor.test(x[[1]], x[[2]])$p.value < 0.05) {
res <- lm(x[[1]] ~ x[[2]])
x$fit <- res$fitted.values
return(x)
} else {
return("There is no sense in prediction")
}
}
regr.calc(iris[,1:2])
mtcars
mtcars[,c('wt', 'mpg', 'disp', 'drat', 'hp')]
test1 <- lm(wt ~ mpg + disp + drat + hp, df )
df <-  mtcars[,c('wt', 'mpg', 'disp', 'drat', 'hp')]
test1 <- lm(wt ~ mpg + disp + drat + hp, df )
summary(test1)
# Adjusted R-squared:  0.8374
test2 <- lm(wt ~ mpg + disp + drat, df)
summary(test2)
# Adjusted R-squared:  0.8236
test3 <- lm(wt ~ mpg + disp, df)
summary(test3)
# Adjusted R-squared:  0.8374
test2 <- lm(wt ~ mpg + disp + hp, df)
summary(test2)
# Adjusted R-squared:  0.8428
test3 <- lm(wt ~ mpg + disp, df)
summary(test3)
data('attitude')
attitude
test4 <- lm(rating ~ complaints*critical, attitude)
summary(test4)
library(ggplot2)
ggplot(swiss, aes(x=Catholic, col='red'))+
geom_hist()
ggplot(swiss, aes(x=Catholic, col='red'))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red', bindwidth=0.4))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red', bindwidth=50))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'), bindwidth=50)+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'), binwidth=50)+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red', binwidth=50))+
geom_histogram()
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=50)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=10)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=5)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=1)
# linear regression with categorical variables
ggplot(swiss, aes(x=Catholic, fill='red'))+
geom_histogram( binwidth=15)
swiss$religion <- ifelse(swiss$Catholic > 60, 'Many', 'Low')
swiss
swiss$religion <-  as.factor(swiss$religion)
swiss
l_m_cat <- lm(Fertility ~ Examination+religion, data=swiss)
summary(l_m_cat)
ggplot(swiss, aes(x = Examination, y = Fertility)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(swiss, aes(x = Examination, y = Fertility, col=religion)) +
geom_point() +
geom_smooth(method = 'lm')
attitude
test4 <- lm(rating ~ complaints*critical, attitude)
summary(test4)
# answer is 0.316
# linear regression with categorical variables
l_m_cat_3 <- lm(Fertility ~ Examination*religion*Infant.Mortality, data=swiss)
summary(l_m_cat_3)
mtcars$am <- factor(mtcars$am, labels = c('Automatic', 'Manual'))
l_m_mtcars <- lm(mpg ~ wt*am, mtcars)
summary(l_m_mtcars)
ggplot(mtcars, aes(x = wt, y = mpg, col=am)) +
geom_point() +
geom_smooth(method = 'lm')
library(ggplot2)
ggplot(mtcars, aes(x = wt, y = mpg, col=am)) +
geom_point() +
geom_smooth(method = 'lm')
ggplot(mtcars, aes(x = wt, y = mpg, col=am)) +
geom_smooth(method = 'lm')
data(swiss)
swiss
pairs(swiss)
ggplot(swiss, aes(x=Examination, y=Education))+
geom_point()
ggplot(swiss, aes(x=Examination, y=Education))+
geom_point()
library(ggplot2)
ggplot(swiss, aes(x=Examination, y=Education))+
geom_point()
ggplot(swiss, aes(x=Examination, y=Education))+
geom_point()+
geom_smooth(method = 'lm')
ggplot(swiss, aes(x=Examination))+
geom_histogram()
ggplot(swiss, aes(x=Education))+
geom_histogram()
ggplot(swiss, aes(x=log(Education)))+
geom_histogram()
my_vector <- c(0.027, 0.079, 0.307, 0.098, 0.021, 0.091, 0.322, 0.211, 0.069, 0.261, 0.241, 0.166, 0.283, 0.041, 0.369, 0.167, 0.001, 0.053, 0.262, 0.033, 0.457, 0.166, 0.344, 0.139, 0.162, 0.152, 0.107, 0.255, 0.037, 0.005, 0.042, 0.220, 0.283, 0.050, 0.194, 0.018, 0.291, 0.037, 0.085, 0.004, 0.265, 0.218, 0.071, 0.213, 0.232, 0.024, 0.049, 0.431, 0.061, 0.523)
shapiro.test(sqrt(my_vector))
ggplot(swiss, aes(x=Examination, y=Education))+
geom_point()+
geom_smooth()
lm1 <- lm(Education ~ Examination, swiss)
summary(lm1)
# now it's time for polinomial regression, we will create new variavle in the dataset
swiss$Examination_squared <- swiss$Examination^2
lm_p <- lm(Education ~ Examination+Examination_squared, swiss)
summary(lm_p)
# let's compare two models
anova(lm1, lm_p)
swiss$lm_fitted <- lm1$fitted.values
swiss$lm_p_fitted <- lm_p$fitted.values
swiss$lm_resid <- lm1$residuals
swiss$lm_p_resid <- lm_p$residuals
swiss$obj_number <- 1:nrow(swiss)
ggplot(swiss, aes(y=Education, x=Examination))+
geom_point()+
geom_line(aes(x=Examination, y=lm_fitted), col='red')+
geom_line(aes(x=Examination, y=lm_p_fitted), col='green')
ggplot(swiss, aew(x=lm_fitted, y=lm_resid ))+
geom_point()+
geom_hline(y=0, col='red')
ggplot(swiss, aes(x=lm_fitted, y=lm_resid ))+
geom_point()+
geom_hline(y=0, col='red')
swiss$lm_fitted <- lm1$fitted.values
swiss$lm_p_fitted <- lm_p$fitted.values
swiss$lm_resid <- lm1$residuals
swiss$lm_p_resid <- lm_p$residuals
swiss$obj_number <- 1:nrow(swiss)
# let's compare two models
anova(lm1, lm_p)
ggplot(swiss, aes(x=lm_fitted, y=lm_resid))+
geom_point()+
geom_hline(y=0, col='red')
ggplot(swiss, aes(x=lm_fitted, y=lm_resid))+
geom_point()+
geom_hline(col='red')
ggplot(swiss, aes(x=lm_fitted, y=lm_resid))+
geom_point()+
geom_hline(yintercept = 0, col='red')
ggplot(swiss, aes(x=lm_p_fitted, y=lm_p_resid))+
geom_point()+
geom_hline(yintercept = 0, col='green')
ggplot(swiss, aes(x=lm_fitted, y=lm_resid))+
geom_point()+
geom_hline(yintercept = 0, col='red')
ggplot(swiss, aes(x=lm_p_fitted, y=lm_p_resid))+
geom_point()+
geom_hline(yintercept = 0, col='green')
ggplot(swiss, aes(x=lm_p_fitted, y=lm_p_resid))+
geom_point()+
geom_hline(yintercept = 0, col='green')
ggplot(swiss, aes(x=obj_number, y=lm_resid))+
geom_point()
ggplot(swiss, aes(x=obj_number, y=lm_resid))+
geom_point()+
geom_smooth()
ggplot(swiss, aes(x=obj_number, y=lm_p_resid))+
geom_point()+
geom_smooth()
install.packages("gvlma")
df_task <- read.csv('https://stepic.org/media/attachments/lesson/12088/homosc.csv')
df_task
gvlma <- gvlma(lm(DV ~ IV, df_task))
library(gvlma)
gvlma <- gvlma(lm(DV ~ IV, df_task))
summary(gvlma)
ggplot(swiss, aes(lm_resid))+
geom_histogram()
ggnorm(lm$residuals)
qqnorm(lm$residuals)
qqline(lm$residuals)
qqnorm(lm1$residuals)
qqline(lm1$residuals)
qqnorm(lm_p$residuals)
qqline(lm_p$residuals)
shapiro.test(lm_resid)
shapiro.test(swiss$lm_resid)
ggplot(swiss, aes(lm_p_resid))+
geom_histogram()
shapiro.test(swiss$lm_p_resid)
ggplot(swiss, aes(lm_p_resid))+
geom_histogram()
ggplot(swiss, aes(lm_resid))+
geom_histogram()
test <- lm(mpg ~ hp, mtcars)
test$residuals
shapiro.test(test$residuals)
sh_t <- shapiro.test(test$residuals)
sh_t$p.value
$p.value
shapiro.test(test$residuals)$p.value
if (shapiro.test(test$residuals)$p.value < 0.05) {
my_plot <-  resid.norm(test)
}
test$residuals
temp <-  as.data.frame(test$residuals)
temp
ggplot(temp, aes(x=test$residuals))+
geom_histogram()
resid.norm  <- function(fit){
temp <-  as.data.frame(fit$residuals)
if (shapiro.test(fit$residuals)$p.value < 0.05) {
my_plot <- ggplot(temp, aes(x=fit$residuals), col='red')+
geom_histogram()
} else {
my_plot <- ggplot(temp, aes(x=fit$residuals), col='green')+
geom_histogram()
}
return(my_plot)
}
resid.norm(lm(mpg ~ wt, mtcars))
resid.norm(lm(mpg ~ wt, mtcars))
lm(mpg ~ wt, mtcars)
resid.norm(fit)
resid.norm  <- function(fit){
temp <-  as.data.frame(fit$residuals)
if (shapiro.test(fit$residuals)$p.value < 0.05) {
my_plot <- ggplot(temp, aes(x=fit$residuals), col='red')+
geom_histogram()
return(my_plot)
} else {
my_plot <- ggplot(temp, aes(x=fit$residuals), col='green')+
geom_histogram()
return(my_plot)
}
fit <- lm(mpg ~ wt, mtcars)
resid.norm(fit)
resid.norm(fit)
shapiro.test(fit$residuals)$p.value
shapiro.test(fit$residuals
shapiro.test(fit$residuals)
fit
fit11 <- lm(mpg ~ wt, mtcars)
resid.norm(fit11)
shapiro.test(fit11$residuals)
temp <-  as.data.frame(fit$residuals)
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
my_plot <- ggplot(temp, aes(x=test$residuals), col='red')+
geom_histogram()
} else {
my_plot <- ggplot(temp, aes(x=test$residuals), col='green')+
geom_histogram()
}
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
ggplot(temp, aes(x=test$residuals), col='red')+
geom_histogram()
} else {
ggplot(temp, aes(x=test$residuals), col='green')+
geom_histogram()
}
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
ggplot(temp, aes(x=test$residuals), col='red')+
geom_histogram()
} else {
ggplot(temp, aes(x=test$residuals), col='green')+
geom_histogram()
}
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
my_plot <- ggplot(temp, aes(x=test$residuals), col='red')+
geom_histogram()
} else {
my_plot <- ggplot(temp, aes(x=test$residuals), col='green')+
geom_histogram()
}
my_plot
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
#my_plot <- ggplot(temp, aes(x=test$residuals), col='red')+
#geom_histogram()
print(1)
} else {
# my_plot <- ggplot(temp, aes(x=test$residuals), col='green')+
#geom_histogram()
print(2)
}
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
ggplot(temp, aes(x=test$residuals), col='red')+
geom_histogram()
print(1)
} else {
# my_plot <- ggplot(temp, aes(x=test$residuals), col='green')+
#geom_histogram()
print(2)
}
ggplot(temp, aes(x=test$residuals), col='red')+
geom_histogram()
ggplot(temp, aes(x=test$residuals)) +
geom_histogram(col='red')
ggplot(temp, aes(x=test$residuals)) +
geom_histogram(fill='red')
test <- lm(mpg ~ hp, mtcars)
temp <-  as.data.frame(test$residuals)
if (shapiro.test(test$residuals)$p.value < 0.05) {
my_plot <-  ggplot(temp, aes(x=test$residuals)) +
geom_histogram(fill='red')
} else {
my_plot <- ggplot(temp, aes(x=test$residuals))+
geom_histogram(fill='green')
}
my_plot
resid.norm  <- function(fit){
temp <-  as.data.frame(fit$residuals)
if (shapiro.test(fit$residuals)$p.value < 0.05) {
my_plot <-  ggplot(temp, aes(x=fit$residuals)) +
geom_histogram(fill='red')
} else {
my_plot <- ggplot(temp, aes(x=fit$residuals))+
geom_histogram(fill='green')
}
return(my_plot)
}
fit11 <- lm(mpg ~ wt, mtcars)
resid.norm(fit11)
shapiro.test(fit11$residuals)
fit <- lm(mpg ~ disp, mtcars)
resid.norm(fit)
df_train <-  read.csv(' https://stepic.org/media/attachments/lesson/10226/train.csv')
df_train <-  read.csv('train.csv')
setwd("~/R_script")
df_train <-  read.csv('train.csv')
df_train
df_train <-  read.csv('train.csv', sep=';')
df_train
str(df_train)
df_train$gender <-  as.factor(df_train$gender)
df_train$hon <-  as.factor((df_train$hon))
str(df_train)
ggplot(df_train, aes(read, math, col=gender))+
geom_point()
ggplot(df_train, aes(read, math, col=gender))+
geom_point()+
facet_grid(. -hon)
ggplot(df_train, aes(read, math, col=gender))+
geom_point()+
facet_grid(. ~hon)
fit <- glm(hon ~ read+math+gender, df_train, family='binomial')
summary(fit)
df_train <-  read.csv('train.csv', sep=';')
exp(fit$coefficients)
predict(object=fit)
head(predict(object=fit))
head(predict(object=fit, typr='response'))
head(predict(object=fit, type='response'))
df_train$probability <- predict(object=fit, type='response')
df_train
mtcars
task_glm <- glm(am ~disp+vs+mpg, mtcars, family = 'binomial')
log_coef <- task_glm$coefficients
# Дополните предложенный в задании код, чтобы построить следующий график по данным ToothGrowth.
#Изобразите различия длины зубов морских свинок в различных условиях дозировки и типа
# потребляемого продукта.
# По оси x - переменная supp.
# По оси y - переменная len.
# Цвет ящиков с усами (boxplot) - переменная dose.
ToothGrowth
ggplot(data = ToothGrowth, aes(x=supp, y=len))+
geom_boxplot()
ggplot(data = ToothGrowth, aes(x=supp, y=len, col=dose))+
geom_boxplot()
ggplot(data = ToothGrowth, aes(x=as.factor(ToothGrouth$supp), y=len, col=dose))+
geom_boxplot()
ggplot(data = ToothGrowth, aes(x=supp, y=len, col=as.factor(dose))+
geom_boxplot()
# Дополните предложенный в задании код, чтобы построить следующий график по данным ToothGrowth.
# Изобразите различия длины зубов морских свинок в различных условиях дозировки и типа
# потребляемого продукта.
# По оси x - переменная supp.
# По оси y - переменная len.
# Цвет ящиков с усами (boxplot) - переменная dose.
ToothGrowth$dose <- as.factor(ToothGrowth$dose )
ToothGrowth$dose <- as.factor(ToothGrowth$dose )
ggplot(data = ToothGrowth, aes(x=supp, y=len, col=dose))+
geom_boxplot()
ToothGrowth$dose <- as.factor(ToothGrowth$dose )
ggplot(data = ToothGrowth, aes(x=supp, y=len, fill=dose))+
geom_boxplot()
install.packages("ROCR")
