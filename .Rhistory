names <- names(num_var)
names
names1 <- c('ms', 'negms')
names1
append(names, names1)
ready <- append(names, names1)
select(joined_df, all_of(ready))
joined_df <- left_join(gr_test, summ, by = c("factor_2" = "factor_2"))
joined_df
select(joined_df, where(is.numeric))
test_data_s <- mtcars[, 1:4]
factors <-  c(1, 3)
temp_s <- as_tibble(select(test_data_s, factors))
str(temp_s)
temp_s %>%
summarise_all(mean)
temp_s
ll <- function(x, mean) {
if (x > mean) {
return(1)
} else {
return(0)
}
}
mutate_all(temp_s, funs(as.factor(ifelse(. > mean(.), 1, 0))))
mutate_all(temp_s, .funs = (as.factor(ifelse(. > mean(.), 1, 0))))
mutate_all(temp_s, .funs = (as.factor(ifelse(.x > mean(.x), 1, 0))))
mutate_all(temp_s, .funs = function(x) (as.factor(ifelse(.x > mean(.x), 1, 0))))
mutate_all(temp_s, .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
temp_nf <- as_tibble(select(test_data_s, !factors))
temp_nf
tem_mut <- mutate_all(temp_s, .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
res <- cbind(temp_nf, tem_mut)
res
test_data_s <- mtcars[, 1:4]
factors <-  c(1, 3)
tem_mut <- mutate_all(as_tibble(select(test_data_s, factors)), .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
tem_mut
res <- cbind(temp_nf, tem_mut)
res
to_factors <- function(test_data, factors){
temp_nf <- as_tibble(select(test_data, !factors))
tem_mut <- mutate_all(as_tibble(select(test_data, factors)), .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
return(cbind(temp_nf, tem_mut))
}
test_data_s <- mtcars[, 1:4]
factors <-  c(1, 3)
temp_nf <- as.data.frame(select(test_data_s, !factors))
tem_mut <- mutate_all(as.data.frame(select(test_data_s, factors)), .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
res <- cbind(temp_nf, tem_mut)
res
to_factors <- function(test_data, factors){
temp_nf <- as.data.frame(select(test_data, !factors))
tem_mut <- mutate_all(as.data.frame(select(test_data, factors)), .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
return(cbind(temp_nf, tem_mut))
}
test_data <- as.data.frame(list(V1 = c(8, 9, 10, 10, 10, 11), V2 = c(10, 10, 10, 9, 10, 9), V3 = c(10, 10, 10, 10, 9, 9), V4 = c(11, 10, 8, 11, 11, 12), V5 = c(11, 11, 10, 7, 9, 12), V6 = c(8, 10, 11, 10, 10, 10), V7 = c(10, 9, 12, 13, 9, 9)))
to_factors(test_data, factors)
factors1 <-  c(4, 3)
to_factors(test_data, factors1)
joined_df <- left_join(gr_test, summ, by = c("factor_2" = "factor_2"))
joined_df
mutate_all(as.data.frame(select(joined_df, where(is.numeric)), .funs = function(x) (as.factor(ifelse(x > mean(x), 1, 0))))
test_data_ap <- read.csv("https://stepic.org/media/attachments/course/724/hard_task.csv")
fact_var <- as_tibble(lapply(select(test_data_ap, !where(is.numeric)),
function(x) as.factor(x)))
num_var <- select(test_data_ap, where(is.numeric))
test_data_ap <- read.csv("https://stepic.org/media/attachments/course/724/hard_task.csv")
test_data_ap
fact_var <- as_tibble(lapply(select(test_data_ap, !where(is.numeric)),
function(x) as.factor(x)))
num_var <- select(test_data_ap, where(is.numeric))
test_data_ap <- cbind(fact_var, num_var)
gr_test <- group_by_at(test_data_ap, names(fact_var))
gr_test <- group_by_at(test_data_ap, names(fact_var))
gr_test
# Применим полученные знания на практике. Возьмем данные diamonds для работы
# в этой задаче. Создайте новый dataframe с именем high_price, в котором будут
# хранится только 10 самых дорогих бриллиантов каждого цвета. Также в итоговом
# datafrmae должны храниться только две переменные color и price.
data(diamonds)
data(diamonds)
high_price <-
diamonds %>%
group_by(color)
high_price
arrange(high_price, price)
arrange(high_price, desc(price))
arrange(high_price, color, desc(price))
arrange(high_price, color, desc(price)) %>%
slice(1:10)
temp <- arrange(high_price, color, desc(price)) %>%
slice(1:10)
temp
print(temp)
print(n=70)
print(temp, n=70)
high_price <-
diamonds %>%
select(color, price) %>%
group_by(color)
high_price
high_price <-
diamonds %>%
select(color, price) %>%
group_by(color)
arrange(color, desc(price))
high_price <-
diamonds %>%
select(color, price) %>%
group_by(color) %>%
arrange(color, desc(price))
high_price
high_price <-
diamonds %>%
select(color, price) %>%
group_by(color) %>%
arrange(color, desc(price)) %>%
slice(1:10)
high_price
test_data_ap
fact_var
num_var
test_data_ap <- cbind(fact_var, num_var)
gr_test <- group_by_at(test_data_ap, names(fact_var))
gr_test
slice(gr_test, 1)
summarise_all(gr_test, list(mean, sd))
summarise_all(gr_test, list(mean=mean, sd=sd))
summarise_all(gr_test, list(mean=mean, sd=sd, mp=mean+2*ds))
summarise_all(gr_test, list(mean=mean, sd=sd, mp=mean+2*sd))
summarise_all(gr_test, list(mean=mean, sd=sd, mp=mean+sd))
summarise_all(gr_test, list(mean=mean, sd=sd))
summ <- summarise_all(gr_test, list(mean=mean, sd=sd))
summ$otp <- summ$mean+2*summ$sd
summ$otn <- summ$mean-2*summ$sd
joined_df <- left_join(gr_test, summ, by = c("factor_2" = "factor_2"))
joined_df
joined_df
num_var
joined_df
joined_df[, c('x', 'otp', 'otn')]
mutate_all(as.data.frame(joined_df[, c('x', 'otp', 'otn')], .funs = function(x) (as.factor(ifelse(x > otp, 1, 0))))
mutate(as.data.frame(joined_df[, c('x', 'otp', 'otn')], .funs = function(x) (as.factor(ifelse(x > otp, 1, 0))))
mutate(as.data.frame(joined_df[, c('x', 'otp', 'otn')],
.funs = function(x) (ifelse(x > otp, 1, 0))))
joined_df$is_outlier <-  ifelse(joined_df$x > joined_df$otp, 1, 0)
joined_df
joined_df$is_outlier <-  ifelse(joined_df$x > joined_df$otp | joined_df$x < joined_df$otn, 1, 0)
joined_df
test_data_ap
cbind(test_data_ap, joined_df$is_outlier)
cbind(test_data_ap, is_outlier=joined_df$is_outlier)
test_data_ap <- read.csv("https://stepic.org/media/attachments/course/724/hard_task.csv")
fact_var <- as_tibble(lapply(select(test_data_ap, !where(is.numeric)),
function(x) as.factor(x)))
num_var <- select(test_data_ap, where(is.numeric))
test_data_ap <- cbind(fact_var, num_var)
gr_test <- group_by_at(test_data_ap, names(fact_var))
slice(gr_test, 1)
summ <- summarise_all(gr_test, list(mean=mean, sd=sd))
summ$otp <- summ$mean+2*summ$sd
summ$otn <- summ$mean-2*summ$sd
test_data_ap <- read.csv("https://stepic.org/media/attachments/course/724/hard_task.csv")
fact_var <- as_tibble(lapply(select(test_data_ap, !where(is.numeric)),
function(x) as.factor(x)))
num_var <- select(test_data_ap, where(is.numeric))
test_data_ap <- cbind(fact_var, num_var)
gr_test <- group_by_at(test_data_ap, names(fact_var))
slice(gr_test, 1)
summ <- summarise_all(gr_test, list(mean=mean, sd=sd))
summ$otp <- summ$mean+2*summ$sd
summ$otn <- summ$mean-2*summ$sd
joined_df <- left_join(gr_test, summ, by = c("factor_2" = "factor_2"))
joined_df$is_outlier <-  ifelse(joined_df$x > joined_df$otp | joined_df$x < joined_df$otn, 1, 0)
cbind(test_data_ap, is_outlier=joined_df$is_outlier)
find_outliers <- function(t){
fact_var <- as_tibble(lapply(select(t, !where(is.numeric)),
function(x) as.factor(x)))
gr_test <- group_by_at(t, names(fact_var))
slice(gr_test, 1)
summ <- summarise_all(gr_test, list(mean=mean, sd=sd))
summ$otp <- summ$mean+2*summ$sd
summ$otn <- summ$mean-2*summ$sd
joined_df <- left_join(gr_test, summ, by = c("factor_2" = "factor_2"))
joined_df$is_outlier <-  ifelse(joined_df$x > joined_df$otp | joined_df$x < joined_df$otn, 1, 0)
return(cbind(test_data_ap, is_outlier=joined_df$is_outlier))
}
find_outliers(test_data_ap)
find_outliers(test_data_ap)
install.packages("Data.Table")
library(data.table)
setwd("~/R_script")
products <- fread('products.csv')
products[ , 1:10]
products[1:10, ]
products[price > 5000]
products[1:10]
products[!(1:10)]
products[, list(name=name,
price_1 = price/1000)]
products[order(products$price, decreasing = T)]
products[order(products$price, decreasing = T), list(name=name,
price_1 = price/1000)]
price_1 = paste0(price/1000, 'thousands')]
products[order(products$price, decreasing = T), list(name=name,
price_1 = paste0(price/1000, 'thousands'))]
products[order(products$price, decreasing = T), list(name=name,
price_1 = paste0(price/1000, ' thousands'))]
# Напишите функцию filter.expensive.available, которая принимает
# на вход products (объект типа data.table) и вектор названий брендов,
# и возвращает только те строчки, которые соответствуют товарам, цена которых
# больше или равна 5000 рублей, доступны на складе, и принадлежат одному
# из переданных брендов.
head(products)
df <- read.csv('add_task1.csv')
df
df_add <- read.csv('add_task1.csv')
df_add
str(df_add)
df_add <- as.tibble(read.csv('add_task1.csv'))
df_add <- as_tibble(read.csv('add_task1.csv'))
str(df_add)
df_add
?starts_with
install.packages('stringr')
library(stringi)
?str_replace()
?str_replace
??str_replace
df_add$V1
str_replace(df_add$V1, ' ', '')
library(stringr)
detach("package:stringi", unload = TRUE)
library(stringi)
str_replace(df_add$V1, ' ', '')
df_add
apply(df_add, 2, function(x) ifelse(grepl('.'), str_replace_all(df_add$V1, ' ', ''), x))
apply(df_add, 2, function(x) ifelse(grepl('.'), str_replace_all(x, ' ', ''), x))
?grepl
apply(df_add, 2, function(x) ifelse(grepl('.', x), str_replace_all(x, ' ', ''), x))
apply(df_add, 2, function(x) ifelse(grepl('.', x), str_replace(x, ' ', ''), x))
sapply(df_add, 2, function(x) ifelse(grepl('.', x), str_replace(x, ' ', ''), x))
sapply(df_add, function(x) ifelse(grepl('.', x), str_replace(x, ' ', ''), x))
lapply(df_add, function(x) ifelse(grepl('.', x), str_replace(x, ' ', ''), x))
df_add <- as_tibble(read.csv('add_task1.csv'))
sapply(df_add, function(x) ifelse(grepl('.', x), str_replace(x, ' ', ''), x))
sapply(df_add, function(x) ifelse(grep('.', x), str_replace(x, ' ', ''), x))
sapply(df_add, function(x) ifelse(grep('.', x), 1, 0))
sapply(df_add, function(x) ifelse(str_detect('.', x), 1, 0))
df_add
mutate_all(df_add,
.funs = function(x) ((str_detect('.', x), 1, 0))))
mutate_all(df_add,
.funs = function(x) (ifelse(str_detect('.', x), 1, 0)))
df_add
mutate_all(df_add,
.funs = function(x) (ifelse(str_detect(',', x), 1, 0)))
mutate_all(df_add,
.funs = function(x) (ifelse(str_detect('.', x), 1, 0)))
df_add
mutate_all(df_add,
.funs = function(x) (ifelse(str_detect('S', x), 1, 0)))
df_add
?str_relplace
?str_replace
?str_replace()
str_replace(df_add$V1, ' ', '')
sapply(df_add, function(x) str_replace(x, ' ', ''))
sapply(df_add, try.num(x))
try.num <- function(x){
xsd <- gsub(' ', '', x)
if(any(is.na(xn <- suppressWarnings(as.numeric(xsd)))))
return(x)
return(xn)
}
sapply(df_add, try.num(x))
try.num <- function(x){
xsd <- gsub(' ', '', x)
if(any(is.na(xn <- suppressWarnings(as.numeric(xsd)))))
return(x)
return(xn)
}
sapply(df_add, function(x) try.num(x))
lapply(df_add, function(x) try.num(x))
as.data.frame(lapply(df_add, function(x) try.num(x)))
res_add <- as.data.frame(lapply(df_add, function(x) try.num(x)))
res_add
str(res_add)
fix_data <- function(d){
try.num <- function(x){
xsd <- gsub(' ', '', x)
if(any(is.na(xn <- suppressWarnings(as.numeric(xsd)))))
return(x)
return(xn)
}
res_add <- as.data.frame(lapply(df_add, function(x) try.num(x)))
return(res_add)
}
fix_data(df_add)
fix_data <- function(d){
try.num <- function(x){
xsd <- gsub(' ', '', x)
#if(any(is.na(xn <- suppressWarnings(as.numeric(xsd)))))
return(x)
return(xn)
}
res_add <- as.data.frame(lapply(df_add, function(x) try.num(x)))
return(res_add)
}
fix_data(df_add)
fix_data <- function(d){
try.num <- function(x){
xsd <- gsub(' ', '', x)
if(any(is.na(xn <- suppressWarnings(as.numeric(xsd)))))
return(x)
return(xn)
}
res_add <- as.data.frame(lapply(df_add, function(x) try.num(x)))
return(res_add)
}
fix_data(df_add)
fix_data <- function(d){
try.num <- function(x){
xsd <- gsub(' ', '', x)
if(any(is.na(xn <- suppressWarnings(as.numeric(xsd)))))
return(x)
return(xn)
}
res_add <- as.data.frame(lapply(d, function(x) try.num(x)))
return(res_add)
}
fix_data(df_add)
sample.products <- data.table(price = c(10000, 600000, 700000, 1000000),
brand = c("a", "b", "c", "d"),
available = c(T, T, F, T))
brand <- c("a", "c", "d")
s_products <- data.table(price = c(10000, 600000, 700000, 1000000),
brand = c("a", "b", "c", "d"),
available = c(T, T, F, T))
s_products
brand_1 <- c("a", "c", "d")
s_products[ , list(price_1 = price/100,
available == T,
brand = brand_1)]
s_products[ , list(price_1 = price/100]
s_products[ , list(price_1 = price/100)]
s_products
s_mod <- s_products[ , list(price_1 = price/100)]
s_mod
s_products[brand %in% brand_1]
s_products[brand %in% brand_1, available == T]
s_products[brand %in% brand_1]
s_products[, available == T]
s_products[price >= 5000000]
s_products[price >= 500000]
s_products[price >= 500000]
s_products[price >= 500000]
s_products[.(brand %in% brand_1, price >= 500000)]
s_products[ ,list(brand %in% brand_1 & price >= 500000)]
s_products[list(brand %in% brand_1 & price >= 500000)]
s_products[list(brand %in% brand_1, price >= 500000)]
s_products[list(brand %in% brand_1]
s_products[brand %in% brand_1]
s_products[(brand %in% brand_1) & (price >= 500000)]
s_products[(brand %in% brand_1) & (price >= 500000) $ (available == T)]
s_products[(brand %in% brand_1) & (price >= 500000) & (available == T)]
filter.expensive.available <- function(products, brands) {
products[(brand %in% brand_1) & (price >= 500000) & (available == T)]
}
"available"=c(TRUE, TRUE, TRUE, TRUE, TRUE, TRUE)
s_products <- data.table(price = c(10000, 600000, 700000, 1000000),
brand = c("a", "b", "c", "d"),
available = c(T, T, F, T))
filter.expensive.available <- function(products, brands) {
products[(brand %in% brand) & (price >= 500000) & (available == T)]
}
filter.expensive.available(s_products, brand_1)
s_products <- data.table(price = c(10000, 600000, 700000, 1000000),
brand = c("a", "b", "c", "d"),
available = c(T, T, F, T))
brand_1 <- c("a", "c", "d")
filter.expensive.available <- function(products, brands) {
products[(brand %in% brands) & (price >= 500000) & (available == T)]
}
filter.expensive.available(s_products, brand_1)
sample.purchases <- data.table(price = c(100000, 6000, 7000, 5000000),
ordernumber = 1:4,
quantity = c(1,2,1,-1),
product_id = 1:4)
sample.purchases
sample.purchases[order(price)]
sample.purchases[order(price, decreasing = T)]
sample.purchases[quantity>0, order(price, decreasing = T)]
sample.purchases[quantity>0]
sample.purchases[quantity>0, list(ordernumber, product_id)]
sample.purchases[quantity>0, list(ordernumber, product_id)][order(price, decreasing = T)]
sample.purchases[order(price, decreasing = T), quantity>0, list(ordernumber, product_id)][]
sample.purchases[order(price, decreasing = T), quantity>0, list(ordernumber, product_id)]
sample.purchases[order(price, decreasing = T)][ quantity>0, list(ordernumber, product_id)]
sample.purchases[quantity>0, list(ordernumber, product_id)]
ordered.short.purchase.data <- function(purchases) {
purchases[order(price, decreasing = T)][quantity>0, list(ordernumber, product_id)]
}
sample.purchases.o <- data.table(price = c(100000, 6000, 7000, 5000000),
ordernumber = c(1,2,2,3),
quantity = c(1,2,1,-1),
product_id = 1:4)
sample.purchases.o
sample.purchases.o[ by='ordernumber']
sample.purchases.o[ price, by='ordernumber']
sample.purchases.o[ ,price, by='ordernumber']
sample.purchases.o[ ,price=median(price), by='ordernumber']
sample.purchases.o[ ,price=mean(price), by='ordernumber']
sample.purchases.o[ ,price=sum(price), by='ordernumber']
sample.purchases.o[price=sum(price), by='ordernumber']
sample.purchases.o <- data.table(price = c(100000, 6000, 7000, 5000000),
ordernumber = c(1,2,2,3),
quantity = c(1,2,1,-1),
product_id = 1:4)
sample.purchases.o[, list(price=median(price)), by='ordernumber']
sample.purchases.o[, list(quantity >0,
price=median(price)), by='ordernumber']
sample.purchases.o[, list(price=median(price)), by='ordernumber']
sample.purchases.o[quantity>0, list(price=median(price)), by='ordernumber']
sample.purchases.o <- data.table(price = c(100000, 6000, 7000, 5000000),
ordernumber = c(1,2,2,3),
quantity = c(1,2,1,-1),
product_id = 1:4)
sample.purchases.o
sample.purchases.o[quantity>0]
sample.purchases.o[quantity>0][, list(price=median(price)), by='ordernumber']
sample.purchases.o[quantity>0][, list(price=mean(price)), by='ordernumber']
sample.purchases.o[quantity>0]
sample.purchases.o[quantity>0][, list(price=median(price*quantity)), by='ordernumber']
sample.purchases.o[quantity>0][, list(price_all=(price*quantity)), by='ordernumber']
sample.purchases.o[quantity>0][, list(price_all=(price*quantity)), by='ordernumber']
sample.purchases.o[quantity>0][, list(price_all=(price*quantity), median(price_all)), by='ordernumber']
sample.purchases.o[quantity>0][, list(price_all=median((price*quantity))), by='ordernumber']
temp <- sample.purchases.o[quantity>0][, list(price_all=median((price*quantity))), by='ordernumber']
temp
median(temp$price_all)
temp <- sample.purchases.o[quantity>0][, list(price_all=((price*quantity))), by='ordernumber']
temp
median(temp$price_all)
temp <- sample.purchases.o[quantity>0][, list(price_all=((price*quantity))), by=ordernumber]
temp
median(sum(temp$price_all))
(sum(temp$price_all))
median(sum(temp$price_all))
median.default(sum(temp$price_all))
(sum(temp$price_all))
(sum(temp$price_all))/2
median((temp$price_all))
temp$price_all
purchases.median.order.price <- function(purchases) {
temp <- purchases[quantity>0][, list(price_all=((price*quantity))), by=ordernumber]
sum((temp$price_all))/2
}
purchases.median.order.price(sample.purchases.o)
sample.purchases.o[quantity>0]
temp <- sample.purchases.o[quantity>0][, list(price_all=((price*quantity))), by=ordernumber]
sample.purchases.o[quantity>0][, list(price_all=((price*quantity))), by=ordernumber]
temp <- sample.purchases.o[quantity>0][, list(price_all=((price*quantity)))]
sample.purchases.o[quantity>0][, list(price_all=((price*quantity)))]
temp <- sample.purchases.o[quantity>0][ , list(quantity, price, product_id,
price_all=((price*quantity)))] by=ordernumber]
sample.purchases.o[quantity>0][ , list(quantity, price, product_id,
price_all=((price*quantity)))]
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity)))]
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity))),
by=ordernumber]
sample.purchases.o[quantity>0]
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity)))]
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity)))],
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity))),
by=ordernumber]
sum((temp$price_all))/2
temp$price_all
median(temp$price_all)
sapply(temp$price_all, median)
sapply(temp$price_all, fucntion(x) median(x))
sapply(temp$price_all, fucntion(x) median(x))
temp$price_all
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity))),
by=ordernumber]$price
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity))),
by=ordernumber]$price_all
temp$price_all
median(c(100000, 19000))
median(c(100000, 12000, 7000))
temp <- purchases[quantity>0][, list(price_all=((price*quantity))), by=ordernumber][, .median=median(price_all)]
sample.purchases.o[quantity>0][ , list(ordernumber, quantity, price, product_id,
price_all=((price*quantity))),
by=ordernumber][, .median=median(price_all)]
sample.purchases.o[quantity>0, price_all=((price*quantity)),
by=ordernumber][, .median=median(price_all)]
sample.purchases.o[quantity>0, price_all=(price*quantity),
by=ordernumber]
temp <- sample.purchases.o[quantity>0, list(price_all=(price*quantity)),
by=ordernumber][, .median=median(price_all)]
sample.purchases.o[quantity>0, list(price_all=(price*quantity)),
by=ordernumber]
sample.purchases.o[quantity>0, list(price_all=(price*quantity)),
by=ordernumber][ ,list(median=median(price_all))]
