apply(temp, 2, function(x) x-colMeans(x))
temp <- select(test_data_02, all_of(var_names))
temp
scale(test_data_02[, 'X4'], center = TRUE)
scale(test_data_02['X4'], center = TRUE)
scale(test_data_02[ , 'X4'], center = TRUE)
scale(test_data_02[ , 'X4'], center = TRUE, scale=FALSE)
apply(temp, 2, scale(x), center = TRUE, scale=FALSE)
apply(temp, 2, function(x) scale(x), center = TRUE, scale=FALSE)
apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
temp <-
apply(select(test_data_02, all_of(var_names)), 2, function(x) scale(x, center = TRUE, scale=FALSE))
temp <-
apply(select(test_data_02, all_of(var_names)), 2, function(x) scale(x, center = TRUE, scale=FALSE))
temp <- select(test_data_02, all_of(var_names))
test_data_02 <- read.csv("https://stepic.org/media/attachments/course/524/cen_data.csv")
var_names = c("X4", "X2", "X1")
temp <- select(test_data_02, all_of(var_names))
apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
cbind(modified, select(test_data_02, !all_of(var_names)))
centered <- function(test_data, var_names){
temp <- select(test_data, all_of(var_names))
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
cbind(modified, select(test_data, !all_of(var_names)))
}
centered(test_data_02)
centered(test_data_02, var_names)
temp1 <- test_data_02[, var_names]
temp1
temp <- test_data_02[, var_names]
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
cbind(modified, select(test_data_02, !all_of(var_names)))
centered <- function(test_data, var_names){
temp <- test_data_02[, var_names]
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
cbind(modified, select(test_data, !all_of(var_names)))
}
centered(test_data_02, var_names)
test_data[, !var_names]
test_data_02[, !var_names]
test_data_02[, -var_names]
test_data_02[, var_names]
test_data_02[, !(var_names)]
subset(test_data_02, !(var_names))
subset(test_data_02, select=!(var_names))
subset(test_data_02, select=(var_names))
subset(test_data_02, select=-(var_names))
subset(test_data_02, select=-var_names)
temp1 <- test_data_02[, -var_names]
temp1
temp <- test_data_02[, var_names]
temp
temp1 <- test_data_02[, -var_names]
var_names = c("X4", "X2", "X1")
var_names
temp <- test_data_02[, var_names]
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
modified
select(test_data_02, !all_of(var_names))
colnames(test_data_02)
colnames(test_data_02) %in% var_names
!colnames(test_data_02) %in% var_names
test_data_02[, !colnames(test_data_02) %in% var_names]
as.data.frame(test_data_02[, !colnames(test_data_02) %in% var_names])
as.list(test_data_02[, !colnames(test_data_02) %in% var_names])
(test_data_02[, !colnames(test_data_02) %in% var_names])
cbind(modified, (test_data_02[, !colnames(test_data_02) %in% var_names]))
(test_data_02[ , !colnames(test_data_02) %in% var_names])
test_data_02[ , !colnames(test_data_02) %in% var_names]
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
modified
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
modified
cbind(modified, (test_data_02[, !colnames(test_data_02) %in% var_names]))
test_data_02
test_data_02[ , !colnames(test_data_02) %in% var_names]
subset <- as.data.frame(test_data_02[ , !colnames(test_data_02) %in% var_names])
subset
!colnames(test_data_02) %in% var_names
col <- colnames((test_data_02))
col
col <- colnames((test_data_02))[!colnames(test_data_02) %in% var_names]
col
subset <- as.data.frame(test_data_02[ , !colnames(test_data_02) %in% var_names], names=colnames((test_data_02))[!colnames(test_data_02) %in% var_names])
subset
subset <- as.data.frame(test_data_02[ , !colnames(test_data_02) %in% var_names], col.names=colnames((test_data_02))[!colnames(test_data_02) %in% var_names])
subset
col <- colnames((test_data_02))[!colnames(test_data_02) %in% var_names]
test_data_02[ , !colnames(test_data_02) %in% var_names]
subset <- as.data.frame(as.list(test_data_02[ , !colnames(test_data_02) %in% var_names]),
col.names=colnames((test_data_02))[!colnames(test_data_02) %in% var_names])
subset
temp <- test_data_02[, var_names]
temp
modified <- apply(temp, 2, function(x) scale(x, center = TRUE, scale=FALSE))
test_data_02[, var_names] <- apply(test_data_02[, var_names], 2, function(x) scale(x, center = TRUE, scale=FALSE))
test_data_02
test_data_02[, var_names]
test_data_02[, var_names] <- sapply(test_data_02[, var_names], 2, function(x) scale(x, center = TRUE, scale=FALSE))
test_data_02[, var_names] <- sapply(test_data_02[, var_names], function(x) scale(x, center = TRUE, scale=FALSE))
test_data_02
centered <- function(test_data, var_names){
test_data[, var_names] <- sapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
}
centered(test_data_02, var_names)
centered <- function(test_data, var_names){
test_data[, var_names] <- sapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
return(test_data)
}
test_data_02 <- read.csv("https://stepic.org/media/attachments/course/524/cen_data.csv")
var_names = c("X4", "X2", "X1")
centered <- function(test_data, var_names){
test_data[, var_names] <- sapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
return(test_data)
}
centered(test_data_02, var_names)
centered <- function(test_data, var_names){
test_data[, var_names] <- sapply(test_data[, var_names],
function(x) x - mean(x))
return(test_data)
}
centered(test_data_02, var_names)
as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
var_names = c("X2")
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
centered(test_data, var_names)
centered <- function(test_data, var_names){
test_data[, var_names] <- sapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
return(test_data)
}
centered(test_data, var_names)
test_data[, var_names] <- apply(test_data[, var_names], 2,
function(x) scale(x, center = TRUE, scale=FALSE))
test_data[, var_names] <- lapply(test_data[, var_names], 2,
function(x) scale(x, center = TRUE, scale=FALSE))
test_data[, var_names] <- lapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
var_names = c("X2")
test_data_02[, var_names] <- sapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data[, var_names] <- sapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data
test_data[, var_names] <- lapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data[, var_names] <- lapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
test_data[, var_names] <- lapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
test_data[, var_names] <- lapply(test_data[, var_names],
function(x) scale(x, center = TRUE, scale=FALSE))
test_data[, var_names] <- apply(test_data[, var_names], 2,
function(x) scale(x, center = TRUE, scale=FALSE))
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
test_data[, var_names] <- apply(test_data[, var_names], 2,
function(x) scale(x, center = TRUE, scale=FALSE))
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
test_data[var_names] <- apply(test_data[var_names], 2,
function(x) scale(x, center = TRUE, scale=FALSE))
test_data
test_data <- as.data.frame(list(X1 = c(13, 9, 6, 9, 11), X2 = c(8, 12, 5, 15, 10), X3 = c(8, 9, 9, 11, 11), X4 = c(8, 11, 9, 7, 12), X5 = c(11, 12, 10, 11, 8)))
var_names = c("X2")
centered <- function(test_data, var_names){
test_data[var_names] <- apply(test_data[var_names], 2,
function(x) scale(x, center = TRUE, scale=FALSE))
return(test_data)
}
centered(test_data, var_names)
#     его массу (кг) - weight
#     длину (см) - length
#     ширину (см) - width
#     тип багажа (сумка или чемодан) - type.
# Напишите функцию get_features , которая получает на вход набор данных о багаже.
# Строит логистическую регрессию, где зависимая переменная  - являлся ли багаж запрещенным,
# а предикторы - остальные переменные, и возвращает вектор с названиями
# статистически значимых переменных (p < 0.05) (в модели без взаимодействия).
# Если в данных нет значимых предикторов, функция возвращает строку с сообщением
# "Prediction makes no sense".
test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
View(test_data_03)
str(test_data_03)
test_data_03$type <- as.factor(test_data_03$type)
test_data_03
str(test_data_03)
test_data_03$is_prohibited <- as.factor(test_data_03$is_prohibited)
test_data_03$type <- as.factor(test_data_03$type)
str(test_data_03)
lg_03 <- glm(is_prohibited ~ weight + length + width + type, test_data_03,
family=binomial)
summary(lg_03)
lg_03$coefficients
lg_03$effects
summary(lg_03)
typeof(summary(lg_03))
summary(lg_03)
summary(lg_03)[1]
summary(lg_03)[2]
summary(lg_03)[3]
summary(lg_03)[4]
summary(lg_03)[5]
summary(lg_03)[6]
anova(lg_03, test='Chisq')
summary(anova)
an <- anova(lg_03, test='Chisq')
an$`Pr(>Chi)`
if (any(an$`Pr(>Chi)`) < 0.05) {
print(0)
}
an$`Pr(>Chi)`
if (any(an$`Pr(>Chi)`< 0.05)) {
print(0)
}
any(an$`Pr(>Chi)`< 0.05)
any(an$`Pr(>Chi)`< 0.05)
any(an$`Pr(>Chi)`< 0.05, na.rm=T)
sum(any(an$`Pr(>Chi)`< 0.05, na.rm=T))
#     длину (см) - length
#     ширину (см) - width
#     тип багажа (сумка или чемодан) - type.
# Напишите функцию get_features , которая получает на вход набор данных о багаже.
# Строит логистическую регрессию, где зависимая переменная  - являлся ли багаж запрещенным,
# а предикторы - остальные переменные, и возвращает вектор с названиями
# статистически значимых переменных (p < 0.05) (в модели без взаимодействия).
# Если в данных нет значимых предикторов, функция возвращает строку с сообщением
# "Prediction makes no sense".
#test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_2.csv")
test_data_03$is_prohibited <- as.factor(test_data_03$is_prohibited)
test_data_03$type <- as.factor(test_data_03$type)
lg_03 <- glm(is_prohibited ~ weight + length + width + type, test_data_03,
family=binomial)
an <- anova(lg_03, test='Chisq')
an$`Pr(>Chi)`
any(an$`Pr(>Chi)`< 0.05, na.rm=T)
an$`Pr(>Chi)`
an$Df
lg_03$formula
an
names <- colnames(test_data_03)
names
names <- colnames(test_data_03[, -"is_prohibited"])
names <- colnames(test_data_03[, -is_prohibited])
names <- colnames(test_data_03[, -c('is_prohibited')])
names <- colnames(test_data_03[, select=-c('is_prohibited')])
names <- colnames(subset(test_data_03, select=-c('is_prohibited')))
names <- colnames(subset(test_data_03, select=-'is_prohibited'))
names <- colnames(test_data_03)
names <- names[, -1]
names <- names[2:5]
names
names <- colnames(test_data_03)[2:5]
names
any(an$`Pr(>Chi)`< 0.05, na.rm=T)
names[names(any(an$`Pr(>Chi)`< 0.05, na.rm=T))]
names(any(an$`Pr(>Chi)`< 0.05, na.rm=T))
names <- colnames(test_data_03)[2:5]
test_data_03
#     длину (см) - length
#     ширину (см) - width
#     тип багажа (сумка или чемодан) - type.
# Напишите функцию get_features , которая получает на вход набор данных о багаже.
# Строит логистическую регрессию, где зависимая переменная  - являлся ли багаж запрещенным,
# а предикторы - остальные переменные, и возвращает вектор с названиями
# статистически значимых переменных (p < 0.05) (в модели без взаимодействия).
# Если в данных нет значимых предикторов, функция возвращает строку с сообщением
# "Prediction makes no sense".
#test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_2.csv")
test_data_03$is_prohibited <- as.factor(test_data_03$is_prohibited)
test_data_03$type <- as.factor(test_data_03$type)
lg_03 <- glm(is_prohibited ~ weight + length + width + type, test_data_03,
family=binomial)
an <- anova(lg_03, test='Chisq')
an$`Pr(>Chi)`
(any(an$`Pr(>Chi)`< 0.05, na.rm=T))
names(any(an$`Pr(>Chi)`< 0.05, na.rm=T))
names
any(an$`Pr(>Chi)`< 0.05, na.rm=T)
sum(any(an$`Pr(>Chi)`< 0.05, na.rm=T))
an$`Pr(>Chi)`
sum(any(an$`Pr(>Chi)`< 0.05, na.rm=T)
sum(any(an$`Pr(>Chi)`< 0.05, na.rm=T))
an$`Pr(>Chi)`
any(an$`Pr(>Chi)`< 0.05, na.rm=T)
an$`Pr(>Chi)`
all(an$`Pr(>Chi)`< 0.05, na.rm=T)
any(an$`Pr(>Chi)`< 0.05, na.rm=T)
supply(an$`Pr(>Chi)`, function(x) ifelse(x < 0.05, x, 0))
sapply(an$`Pr(>Chi)`, function(x) ifelse(x < 0.05, x, 0))
lapply(an$`Pr(>Chi)`, function(x) ifelse(x < 0.05, x, 0))
temp <- lapply(an$`Pr(>Chi)`, function(x) ifelse(x < 0.05, x, 0))
for (i in 1:length(temp)) {
print(i)
}
names <- colnames(test_data_03)
names
for (i in 1:length(temp)) {
print(names[i])
}
for (i in 1:length(an$`Pr(>Chi)`)) {
if (an$`Pr(>Chi)`[i] < 0.05){
print(names[i])
}
}
for (i in 1:length(an$`Pr(>Chi)`)) {
an$`Pr(>Chi)`[i]
#if (an$`Pr(>Chi)`[i] < 0.05){
#print(names[i])
}
for (i in 1:length(an$`Pr(>Chi)`)) {
print(an$`Pr(>Chi)`[i])
#if (an$`Pr(>Chi)`[i] < 0.05){
#print(names[i])
}
for (i in 1:length(an$`Pr(>Chi)`)) {
if (an$`Pr(>Chi)`[i] < 0.05){
print(names[i])
} else{
print("Prediction makes no sense")
}
}
for (i in 1:length(na.omit(an$`Pr(>Chi)`))) {
if (na.omit(an$`Pr(>Chi)`[i] < 0.05)){
print(names[i])
} else{
print("Prediction makes no sense")
}
}
for (i in 1:length(na.omit(an$`Pr(>Chi)`))) {
if (na.omit(an$`Pr(>Chi)`)[i] < 0.05){
print(names[i])
} else{
print("Prediction makes no sense")
}
}
if (na.omit(an$`Pr(>Chi)`)[i] < 0.05){
print(names[i])
}
for (i in 1:length(na.omit(an$`Pr(>Chi)`))) {
if (na.omit(an$`Pr(>Chi)`)[i] < 0.05){
print(names[i])
}
}
an$`Pr(>Chi)`
an$`Pr(>Chi)`
if (any(an$`Pr(>Chi)`, na.rm =T) {
if (any(an$`Pr(>Chi)`, na.rm =T) {
if (any(an$`Pr(>Chi)`, na.rm =T)) {
for (i in 1:length(na.omit(an$`Pr(>Chi)`))) {
if (na.omit(an$`Pr(>Chi)`)[i] < 0.05){
print(names[i])
}
} else {
if (any(an$`Pr(>Chi)`, na.rm =T)) {
for (i in 1:length(na.omit(an$`Pr(>Chi)`))) {
if (na.omit(an$`Pr(>Chi)`)[i] < 0.05){
print(names[i])
}
}
else {
if (any(an$`Pr(>Chi)`, na.rm =T)) {
for (i in 1:length(na.omit(an$`Pr(>Chi)`))) {
if (na.omit(an$`Pr(>Chi)`)[i] < 0.05){
print(names[i])
}
}} else {
print("Prediction makes no sense")
}
names <- colnames(test_data_03)
names
names <- colnames(test_data_03[ , -1])
names
any(an$`Pr(>Chi)`, na.rm =T)
an$`Pr(>Chi)`
an$`Pr(>Chi)`
any(an$`Pr(>Chi)`, na.rm =T)
any(an$`Pr(>Chi)`, na.rm =T)
an$`Pr(>Chi)`
any(na.omit(an$`Pr(>Chi)`))
an$`Pr(>Chi)`
any(an$`Pr(>Chi)`)
#     длину (см) - length
#     ширину (см) - width
#     тип багажа (сумка или чемодан) - type.
# Напишите функцию get_features , которая получает на вход набор данных о багаже.
# Строит логистическую регрессию, где зависимая переменная  - являлся ли багаж запрещенным,
# а предикторы - остальные переменные, и возвращает вектор с названиями
# статистически значимых переменных (p < 0.05) (в модели без взаимодействия).
# Если в данных нет значимых предикторов, функция возвращает строку с сообщением
# "Prediction makes no sense".
#test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_2.csv")
test_data_03$is_prohibited <- as.factor(test_data_03$is_prohibited)
test_data_03$type <- as.factor(test_data_03$type)
lg_03 <- glm(is_prohibited ~ weight + length + width + type, test_data_03,
family=binomial)
an <- anova(lg_03, test='Chisq')
any(an$`Pr(>Chi)`)
names <- colnames(test_data_03[ , -1])
any(na.omit(an$`Pr(>Chi)`))
rownames(subset(an,`Pr(>Chi)`<0.05))
lg_03 <- glm(is_prohibited ~ ., test_data_03,
family=binomial)
an <- anova(lg_03, test='Chisq')
rownames(subset(an,`Pr(>Chi)`<0.05))
test_data_03
an <- anova(lg_03, test='Chisq')
an
rownames(subset(an,`Pr(>Chi)`<0.05))
get_features <- function(dataset){
dataset$is_prohibited <- as.factor(dataset$is_prohibited)
dataset$type <- as.factor(dataset$type)
lg_03 <- glm(is_prohibited ~ ., dataset,
family=binomial)
an <- anova(lg_03, test='Chisq')
rownames(subset(an,`Pr(>Chi)`<0.05))
}
get_features(test_data_03)
#     длину (см) - length
#     ширину (см) - width
#     тип багажа (сумка или чемодан) - type.
# Напишите функцию get_features , которая получает на вход набор данных о багаже.
# Строит логистическую регрессию, где зависимая переменная  - являлся ли багаж запрещенным,
# а предикторы - остальные переменные, и возвращает вектор с названиями
# статистически значимых переменных (p < 0.05) (в модели без взаимодействия).
# Если в данных нет значимых предикторов, функция возвращает строку с сообщением
# "Prediction makes no sense".
#test_data_03 <- read.csv("https://stepic.org/media/attachments/course/524/test_luggage_1.csv")
test_data_03 <- data.frame(is_prohibited = factor( rep(1:2, each = 15)),weight = c( 82,78,75,82,78,76,86,81,80,81,84,84,80,75,72,81,74,75,84,86,90,80,84,64,79,82,79,79,80,86,82,78,75,82,78,76,86,81,80,81,84,84,80,75,72,81,74,75,84,86,90,80,84,64,79,82,79,79,80,86 ),length = c( 53,46,47,42,57,62,59,58,42,48,48,58,48,47,46,51,48,42,43,53,51,49,42,58,45,57,58,62,58,48,53,46,47,42,57,62,59,58,42,48,48,58,48,47,46,51,48,42,43,53,51,49,42,58,45,57,58,62,58,48 ),width = c( 21,18,20,21,24,21,19,22,18,20,21,19,21,19,21,22,20,21,20,18,18,20,21,16,21,19,23,21,21,21,21,18,20,21,24,21,19,22,18,20,21,19,21,19,21,22,20,21,20,18,18,20,21,16,21,19,23,21,21,21 ),type = factor(c( 1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2 )))
test_data_03
test_data_03
lg_03 <- glm(is_prohibited ~ ., test_data_03,
family=binomial)
if (length(rownames(subset(an,`Pr(>Chi)`<0.05)) != 0)) {
print(rownames(subset(an,`Pr(>Chi)`<0.05)))
} else {
print("Prediction makes no sense")
}
an <- anova(lg_03, test='Chisq')
if (length(rownames(subset(an,`Pr(>Chi)`<0.05)) != 0)) {
print(rownames(subset(an,`Pr(>Chi)`<0.05)))
} else {
print("Prediction makes no sense")
}
get_features <- function(dataset){
dataset$is_prohibited <- as.factor(dataset$is_prohibited)
dataset$type <- as.factor(dataset$type)
lg_03 <- glm(is_prohibited ~ ., dataset,
family=binomial)
an <- anova(lg_03, test='Chisq')
if (length(rownames(subset(an,`Pr(>Chi)`<0.05)) != 0)) {
return(rownames(subset(an,`Pr(>Chi)`<0.05)))
} else {
return("Prediction makes no sense")
}
}
get_features(test_data_03)
test_data_04 <- read.csv("https://stepic.org/media/attachments/course/524/test_data_passangers.csv")
test_data_04
data_for_predict <-read.csv("https://stepic.org/media/attachments/course/524/predict_passangers.csv")
data_for_predict
test_data_04
str(test_data_04)
test_data_04$is_prohibited <- as.factor(dataset$is_prohibited)
test_data_04$type <- as.factor(dataset$type)
test_data_04$is_prohibited <- as.factor(test_data_04$is_prohibited)
test_data_04$type <- as.factor(test_data_04$type)
str(test_data_04)
lg_04 <- glm(is_prohibited ~ ., data=test_data_04, family=binomial)
data_for_predict
str(data_for_predict)
data_for_predict$type <- as.factor(data_for_predict$type)
str(data_for_predict)
data_for_predict[, 1:4]
predict.glm(lg_04, newdata = data_for_predict[, 1:4])
y_perd <- predict.glm(lg_04, newdata = data_for_predict[, 1:4])
y_pred <- predict.glm(lg_04, newdata = data_for_predict[, 1:4])
y_pred
y_pred <- predict.glm(lg_04, newdata = data_for_predict[, 1:4], type="response")
y_pred
y_pred <- exp(predict.glm(lg_04, newdata = data_for_predict[, 1:4], type="response"))
y_pred
y_pred <- predict.glm(lg_04, newdata = data_for_predict[, 1:4], type="response")
max(y_pred)
which.max(y_pred)
which(y_pred == max(y_pred))
which(y_pred == max(y_pred))
data_for_predict$passangers[6]
data_for_predict$passangers[which(y_pred == max(y_pred))]
most_suspicious <- function(test_data, data_for_predict){
test_data$is_prohibited <- as.factor(test_data$is_prohibited)
test_data$type <- as.factor(test_data$type)
data_for_predict$type <- as.factor(data_for_predict$type)
lg_04 <- glm(is_prohibited ~ ., data=test_data, family=binomial)
y_pred <- predict.glm(lg_04, newdata = data_for_predict[, 1:4], type="response")
data_for_predict$passangers[which(y_pred == max(y_pred))]
}
most_suspicious(test_data_04, data_for_predict)
test_05 <- read.csv("https://stepic.org/media/attachments/course/524/test.csv")
test_05
subset(test_05, select = is.numeric)
unlist(lapply(test_05,is.numeric))
