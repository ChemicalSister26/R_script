vec <- (sapply(temp, function(x) x$p.value>0.05))
vec
?unlist
unlist(vec)
unlist(test_data_lm[vec])
vec <- (sapply(temp, function(x) x$p.value>0.05))
vec
sapply(vec, function(x) x[2])
vec <- (sapply(temp, function(x) x$p.value>0.05))
# которых значимо не отличается от нормального (p - value теста Шапиро - Уилка больше 0.05).
# Напишите функцию smart_lm, которая получает на вход data.frame
# с произвольным числом количественных переменных.
# Первая колонка в данных - это зависимая переменная, все остальные - предикторы.
# На первом этапе вы должны отобрать предикторы для модели.
# Функция возвращает в виде вектора коэффициенты линейной регрессии
# построенной только для отобранных предикторов
# (условие нормальности распределения). Если таких предикторов
# в данных не оказалось, то функция возвращает предупреждение
# "There are no normal variables in the data".
data(swiss)
str(swiss)
test_data_lm <- swiss
temp <- apply(data.frame([, 2:ncol(test_data_lm)]), 2, function(x) shapiro.test(x))
temp <- apply(data.frame(test_fata_lm[, 2:ncol(test_data_lm)]), 2, function(x) shapiro.test(x))
temp <- apply(data.frame(test_data_lm[, 2:ncol(test_data_lm)]), 2, function(x) shapiro.test(x))
vec <- sapply(temp, function(x) x$p.value>0.05)
sapply(vec, function(x) x[2])
vec <- sapply(temp, function(x) x$p.value>0.05)
temp <- apply(data.frame(test_data_lm[, 2:ncol(test_data_lm)]), 2, function(x) shapiro.test(x))
temp
vec <- lapply(temp, function(x) x$p.value>0.05)
vec
sapply(vec, function(x) x[2])
sapply(vec, function(x) as.logical(x[2]))
vec
vec[[1]]
vec[[2]]
vec[[3]]
sapply(vec, function(x) (x[[2]]))
sapply(vec, function(x) (x[2]))
sapply(vec, function(x) (x[1]))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec
sapply(vec, function(x) (x[1]))
vec1 <- sapply(vec, function(x) (x[1]))
vec
vec1
test_data_lm[, vec1]
test_data_lm[, 2:ncol(test_data_lm)][, vec1]
test_data_lm <-  swiss
in_var <- test_data_lm[, 2:ncol(test_data_lm)]
temp <- apply(data.frame(in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var[, vec1]
dep_var <- test_data_lm[, 1]
dep_var
dep_var <- data.frame(test_data_lm[, 1])
dep_var
dep_var <- data.frame(test_data_lm[, 1])
temp <- apply(data.frame(in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var[, vec1]
in_var_ready <- in_var[, vec1]
lm_stat <- apply(in_var_ready, 2, function(x) lm(dep_var ~ x))
ready <- cbind(dep_var, in_var_ready)
ready
dep_var <- (test_data_lm[, 1])
ready <- cbind(dep_var, in_var_ready)
ready
ready <- cbind(dep_var, in_var_ready)
in_var_ready <- in_var[, vec1]
in_var_ready
ready
lm_stat <- llm(ready[[1]] ~ ., ready[-1]))
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
lm_stat
str(lm_stat)
str(lm_stat$coefficients)
typeof(lm_stat$coefficients)
as.vector(lm_stat$coefficients)
as.vector(lm_stat$coefficients)
lm_stat$coefficients
in_var_ready
ncol(in_var_ready)
smart_lm <- function(x){
in_var <- x[, 2:ncol(x)]
dep_var <- (x[, 1])
temp <- apply(data.frame(in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- in_var[, vec1]
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return(("There are no normal variables in the data"))
}
}
smart_lm(swiss)
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
test_data <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
smart_lm(test_data)
smart_lm <- function(x){
in_var <- data.frame(x[, 2:ncol(x)])
dep_var <- (x[, 1])
temp <- apply(data.frame(in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- in_var[, vec1]
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return(("There are no normal variables in the data"))
}
}
smart_lm(test_data)
smart_lm <- function(x){
in_var <- data.frame(x[, 2:ncol(x)])
dep_var <- (x[, 1])
temp <- apply(data.frame(in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- in_var[, vec1]
if (ncol(in_var_ready) != 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return(("There are no normal variables in the data"))
}
}
smart_lm(test_data)
in_var_ready <- in_var[, vec1]
smart_lm(test_data)
in_var <- data.frame(test_data[, 2:ncol(test_data)])
in_var
dep_var <- (test_data[, 1])
dep_var
test_data_3 <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
in_var <- data.frame(test_data_3[, 2:ncol(test_data_3)])
in_var
dep_var <- (test_data_3[, 1])
dep_var
dep_var <- data.frame(test_data_3[, 1])
dep_var
temp <- apply((in_var), 2, function(x) shapiro.test(x))
temp
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
vec1
in_var_ready <- in_var[, vec1]
in_var_ready
(ncol(in_var_ready) > 0)
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
#return(lm_stat$coefficients)
}
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
print(lm_stat$coefficients)
}
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
print(lm_stat$coefficients)
} else {
return(("There are no normal variables in the data"))
}
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
print(lm_stat$coefficients)
} else {
print("There are no normal variables in the data"))
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
print(lm_stat$coefficients)
} else {
print("There are no normal variables in the data")
}
smart_lm(test_data_3)
smart_lm <- function(x){
in_var <- data.frame(test_data_3[, 2:ncol(test_data_3)])
dep_var <- data.frame(test_data_3[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- in_var[, vec1]
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
}
smart_lm(test_data_3)
smart_lm(test_data_3)
smart_lm <- function(x){
in_var <- data.frame(x[, 2:ncol(x)])
dep_var <- data.frame(x[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- in_var[, vec1]
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
}
smart_lm(test_data_3)
test_data <- as.data.frame(list(V1 = c(18.6, 20.9, 20.1, 19.8, 17.4, 17.9, 17.7, 24.2, 19.3, 20.8, 20.4, 19.9, 22.5, 22.1, 21.2, 18.1, 18.1, 23.3, 19, 19.6, 18.5, 21.9, 19.9, 16.8, 22.1, 19, 21.3, 19.8, 19.6, 20.3), V2 = c(19.1, 20.7, 22.2, 20.7, 20.7, 19.9, 19.1, 19.1, 22.2, 23.5, 17.9, 17.9, 19.8, 20.4, 24.1, 20.1, 21.2, 19.1, 18.3, 17.9, 17.9, 19.9, 19.8, 20.9, 18.1, 17.8, 20.4, 17.6, 21.6, 16.2)))
test_data_4 <- as.data.frame(list(V1 = c(18.6, 20.9, 20.1, 19.8, 17.4, 17.9, 17.7, 24.2, 19.3, 20.8, 20.4, 19.9, 22.5, 22.1, 21.2, 18.1, 18.1, 23.3, 19, 19.6, 18.5, 21.9, 19.9, 16.8, 22.1, 19, 21.3, 19.8, 19.6, 20.3), V2 = c(19.1, 20.7, 22.2, 20.7, 20.7, 19.9, 19.1, 19.1, 22.2, 23.5, 17.9, 17.9, 19.8, 20.4, 24.1, 20.1, 21.2, 19.1, 18.3, 17.9, 17.9, 19.9, 19.8, 20.9, 18.1, 17.8, 20.4, 17.6, 21.6, 16.2)))
smart_lm(test_data_4)
test_data_4
smart_lm(test_data_3)
test_data_3
test_data_3
smart_lm(test_data_3)
test_data_4 <- as.data.frame(list(V1 = c(18.6, 20.9, 20.1, 19.8, 17.4, 17.9, 17.7, 24.2, 19.3, 20.8, 20.4, 19.9, 22.5, 22.1, 21.2, 18.1, 18.1, 23.3, 19, 19.6, 18.5, 21.9, 19.9, 16.8, 22.1, 19, 21.3, 19.8, 19.6, 20.3), V2 = c(19.1, 20.7, 22.2, 20.7, 20.7, 19.9, 19.1, 19.1, 22.2, 23.5, 17.9, 17.9, 19.8, 20.4, 24.1, 20.1, 21.2, 19.1, 18.3, 17.9, 17.9, 19.9, 19.8, 20.9, 18.1, 17.8, 20.4, 17.6, 21.6, 16.2)))
test_data_4
smart_lm(test_data_4)
smart_lm(test_data_3)
smart_lm <- function(x){
in_var <- data.frame(x[, 2:ncol(x)])
dep_var <- data.frame(x[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- in_var[, vec1]
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
}
test_data_3 <- read.csv("https://stepik.org/media/attachments/course/724/test.csv")
smart_lm(test_data_3)
test_data_4 <- as.data.frame(list(V1 = c(18.6, 20.9, 20.1, 19.8, 17.4, 17.9, 17.7, 24.2, 19.3, 20.8, 20.4, 19.9, 22.5, 22.1, 21.2, 18.1, 18.1, 23.3, 19, 19.6, 18.5, 21.9, 19.9, 16.8, 22.1, 19, 21.3, 19.8, 19.6, 20.3), V2 = c(19.1, 20.7, 22.2, 20.7, 20.7, 19.9, 19.1, 19.1, 22.2, 23.5, 17.9, 17.9, 19.8, 20.4, 24.1, 20.1, 21.2, 19.1, 18.3, 17.9, 17.9, 19.9, 19.8, 20.9, 18.1, 17.8, 20.4, 17.6, 21.6, 16.2)))
smart_lm(test_data_4)
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
in_var
dep_var <- data.frame(test_data_4[, 1])
dep_var
temp <- apply((in_var), 2, function(x) shapiro.test(x))
temp
vec <- lapply(temp, function(x) x$p.value>0.05)
vec
temp <- apply((in_var), 2, function(x) shapiro.test(x))
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec
temp
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
vec1
vec1 <- sapply(vec, function(x) (x[1]))
vec1
in_var_ready <- in_var[, vec1]
in_var_ready
in_var_ready <- data.frame(in_var[, vec1])
in_var_ready <- data.frame(in_var[, vec1])
in_var_ready
ncol(in_var_ready)
smart_lm <- function(x){
in_var <- data.frame(x[, 2:ncol(x)])
dep_var <- data.frame(x[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- data.frame(in_var[, vec1])
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
}
smart_lm(test_data_4)
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
in_var
ready
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
dep_var <- data.frame(test_data_4[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- data.frame(in_var[, vec1])
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
dep_var <- data.frame(test_data_4[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- data.frame(in_var[, vec1])
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
print(lm_stat$coefficients)
} else {
print("There are no normal variables in the data")
}
smart_lm <- function(x){
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
dep_var <- data.frame(test_data_4[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- data.frame(in_var[, vec1])
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
print(lm_stat$coefficients)
} else {
print("There are no normal variables in the data")
}
}
smart_lm(test_data_4)
smart_lm <- function(x){
in_var <- data.frame(test_data_4[, 2:ncol(test_data_4)])
dep_var <- data.frame(test_data_4[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- data.frame(in_var[, vec1])
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
}
smart_lm(test_data_4)
smart_lm <- function(x){
in_var <- data.frame(x[, 2:ncol(x)])
dep_var <- data.frame(x[, 1])
temp <- apply((in_var), 2, function(x) shapiro.test(x))
vec <- lapply(temp, function(x) x$p.value>0.05)
vec1 <- sapply(vec, function(x) (x[1]))
in_var_ready <- data.frame(in_var[, vec1])
if (ncol(in_var_ready) > 0) {
ready <- cbind(dep_var, in_var_ready)
lm_stat <- lm(ready[[1]] ~ ., ready[-1])
return(lm_stat$coefficients)
} else {
return("There are no normal variables in the data")
}
}
smart_lm(test_data_4)
iris
apply(iris, 2, function(x) is.numeric(x))
str(iris)
apply(iris, 2, function(x) is.numeric(x))
apply(iris, 1, function(x) is.numeric(x))
apply(iris, 2, function(x) is.numeric(x))
apply(iris, 2, function(x) x[is.numeric(x)])
lapply(iris, 2, function(x) x[is.numeric(x)])
apply(iris, 2, function(x) x[is.numeric(x)])
nums <- unlist(lapply(iris, is.numeric), use.names = FALSE)
nums
apply(iris, 2, function(x) is.numeric)
nums <- unlist(lapply(iris, is.numeric), use.names = FALSE)
nums
iris[, nums]
apply(iris[, nums], 2, function(x) t_test(x, mu))
apply(iris[, nums], 2, function(x) t.test(x, mu))
mu <- 4
apply(iris[, nums], 2, function(x) t.test(x, mu))
iris[, nums]
apply(iris[, nums], 2, function(x) t.test(x, mu=mu))
res <- apply(iris[, nums], 2, function(x) t.test(x, mu=mu))
res
res <- sapply(iris[nums],  function(x) t.test(x, mu=mu))
res
res <- apply(iris[, nums],  function(x) t.test(x, mu=mu))
res <- apply(iris[, nums],  t.test(x, mu=mu))
res <- sapply(iris[, nums],  t.test(x, mu=mu))
res <- apply(iris[, nums], 2,  fucntion(x) t.test(x, mu=mu))
res <- apply(iris[, nums], 2,  function(x) t.test(x, mu=mu))
res
iris[, nums]
unlist(lapply(iris[, nums], t.test(x, mu=mu))
unlist(lapply(iris[, nums], t.test(x, mu=mu)))
(lapply(iris[, nums], t.test(x, mu=mu)))
(lapply(iris[, nums], t.test, mu=mu))
(sapply(iris[, nums], t.test, mu=mu))
(lapply(iris[, nums], t.test, mu=mu))
res1 <- lapply(iris[, nums], t.test, mu=mu
res1
res1 <- lapply(iris[, nums], t.test, mu=mu
res1
res3 <- lapply(iris[, nums], t.test, mu=mu)
res3
str(res3)
sapply(res3, function(x) (x[1]))
sapply(res3, function(x) (x[2]))
sapply(res3, function(x) (x[3]))
sapply(res3, function(x) (x[c(1,2,3)]))
sapply(res3, function(x) (x[[1]))
sapply(res3, function(x) x[[1]])
sapply(res3, function(x) x[[c(1, 2, 3]])
sapply(res3, function(x) x[[c(1, 2, 3)]])
sapply(res3, function(x) x[1])
res3 <- sapply(iris[, nums], t.test, mu=mu)
res3
res3 <- lapply(iris[, nums], t.test, mu=mu)
res3
sapply(res3, function(x) x[1])
res3[1]
res3[1]
res3[[1]]
sapply(res3, function(x) x[[1]])
res3
res3[[1]]$
typeof(res3)
res3[[1]]$
typeof(res3)
#res3[[1]]$
typeof(res3)
lapply(res3, function(x) x[[1]])
lapply(res3, function(x) x[1])
lapply(res3, function(x) x[1])
lapply(res3, function(x) x[1,2,3])
lapply(res3, function(x) x[c(1,2,3)])
lapply(res3, function(x) x[c(1,2,3)])
lapply(res3, function(x) x[, c(1,2,3)])
lapply(res3, function(x) x[c(1,2,3)])
lapply(res3, function(x) x[1:3])
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric), use.names = FALSE)
res <- apply(test_data[, nums], 2,  function(x) t.test(x, mu=mu))
res3 <- lapply(test_data[, nums], t.test, mu=mu)
lapply(res3, function(x) x[1:3])
}
one_sample_t(iris, mu)
as.vector(lapply(res3, function(x) x[1:3]))
str(iris)
mu <- 4
nums <- unlist(lapply(iris, is.numeric), use.names = FALSE)
res <- apply(iris[, nums], 2,  function(x) t.test(x, mu=mu))
res3 <- lapply(iris[, nums], t.test, mu=mu)
as.vector(lapply(res3, function(x) x[1:3]))
(lapply(res3, function(x) x[1:3]))
lapply(res3, function(x) x[1:3])
res4 <- lapply(res3, function(x) x[1:3])
res3[1]$statistic
res3[1]
str(iris)
mu <- 4
nums <- unlist(lapply(iris, is.numeric), use.names = FALSE)
res <- apply(iris[, nums], 2,  function(x) t.test(x, mu=mu))
res3 <- lapply(iris[, nums], t.test, mu=mu)
res3
res3 <- lapply(iris[, nums], c(t.test(x,mu=general_mean))$statistic))
res3 <- lapply(iris[, nums], c(t.test(x,mu=general_mean))$statistic)
res3 <- lapply(iris[, nums], c(t.test(x,mu=mu))$statistic)
res3 <- lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$statistic)
res3
res3 <- lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$statistic) c(t.test(x,mu=mu))$parameter)
lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$parameter)
lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$p.value)
str(iris)
mu <- 4
nums <- unlist(lapply(iris, is.numeric), use.names = FALSE)
res <- apply(iris[, nums], 2,  function(x) t.test(x, mu=mu))
lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$statistic)
lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$parameter)
lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$p.value)
lapply(iris[, nums], function(x) c(t.test(x,mu=mu))$statistic), (t.test(x,mu=mu))$parameter), (t.test(x,mu=mu))$p.value))
lapply(iris[, nums], function(x) c(t.test(x,mu=mu)$statistic, t.test(x,mu=mu)$parameter, t.test(x,mu=mu)$p.value))
one_sample_t <- function(test_data, general_mean){
nums <- unlist(lapply(test_data, is.numeric), use.names = FALSE)
lapply(iris[, nums], function(x) c(t.test(x,mu=general_mean)$statistic, t.test(x,mu=general_mean)$parameter, t.test(x,mu=general_mean)$p.value))
}
one_sample_t(iris, mu)
test_data <- as.data.frame(list(V1 = c("B", "A", "A", "A", "A", "B", "A", "B", "A", "A"), V2 = c("B", "A", "A", "B", "A", "A", "A", "A", "B", "B"), V3 = c(39, 34, 43, 26, 27, 36, 34, 49, 25, 36), V4 = c(40, 27, 31, 39, 34, 44, 30, 42, 41, 30), V5 = c(29, 37, 48, 25, 43, 44, 25, 50, 22, 44)))
test_data
one_sample_t(test_data, mu)
nums <- unlist(lapply(test_data, is.numeric), use.names = FALSE)
nums
res <- apply(test_data[, nums], 2,  function(x) t.test(x, mu=mu))
str(test_data)
res <- apply(test_data[, nums], 2,  function(x) t.test(x, mu=mu))
test_data[, nums]
lapply(test_data[, nums], function(x) c(t.test(x,mu=mu)$statistic, t.test(x,mu=mu)$parameter, t.test(x,mu=mu)$p.value))
str(test_data)
mu <- 4
nums <- unlist(lapply(test_data, is.numeric), use.names = FALSE)
res <- apply(test_data[, nums], 2,  function(x) t.test(x, mu=mu))
one_sample_t(test_data, mu)
test_data
